"""
>>========================================================================================<<
||....._.._.._.._...._..........._.._.._.._.._...._.......................................||
||..._(_)(_)(_)(_)_.(_)._....._.(_)(_)(_)(_)(_)_.(_)......................................||
||..(_)..........(_)(_)(_)...(_)(_)(_)........(_)(_)......................................||
||..(_)_.._.._.._...(_).(_)_(_).(_)(_)._.._.._(_)(_)......................................||
||....(_)(_)(_)(_)_.(_)...(_)...(_)(_)(_)(_)(_)..(_)......................................||
||..._...........(_)(_).........(_)(_)...........(_)......................................||
||..(_)_.._.._.._(_)(_).........(_)(_)...........(_)._.._.._.._...........................||
||....(_)(_)(_)(_)..(_).........(_)(_)...........(_)(_)(_)(_)(_)..........................||
||........................................................................................||
||........................................................................................||
||..._..........._........_........_..........._.._.._.._.._..............................||
||..(_)._....._.(_)....._(_)_.....(_)......._.(_)(_)(_)(_)(_)._...........................||
||..(_)(_)...(_)(_)..._(_).(_)_...(_)...._.(_)...(_).........(_)..........................||
||..(_).(_)_(_).(_)._(_).....(_)_.(_)._.(_)......(_)._.._.._.(_)..........................||
||..(_)...(_)...(_)(_)._.._.._.(_)(_)(_)._.......(_)(_)(_)(_).............................||
||..(_).........(_)(_)(_)(_)(_)(_)(_)...(_)._....(_)...(_)._..............................||
||..(_).........(_)(_).........(_)(_)......(_)._.(_)......(_)._...........................||
||..(_).........(_)(_).........(_)(_).........(_)(_).........(_)..........................||
>>========================================================================================<<
"""

"""this python script works in tandem with the LOOP CSV XTRACTOR 
it will write the loop point data from the .csv generated by LOOP XTRACTOR into
the SMPL chunk of your samples' .wav files -- conrad"""


import wave
import struct
import pandas as pd
import os
import io

def create_smpl_chunk(loop_start: int, loop_end: int) -> bytes:
    """Create SMPL chunk data with correct loop point placement and explicit little-endian formatting."""
    smpl_chunk_id = b'smpl'
    smpl_chunk_size = 60  # 36 bytes for main struct + 24 bytes for loop info
    manufacturer = 0
    product = 0
    sample_period = 22676  # Default to 44.1kHz
    midi_unity_note = 60  # Middle C
    midi_pitch_fraction = 0
    smpte_format = 0
    smpte_offset = 0
    num_sample_loops = 1
    sampler_data = 24
    
    # Main chunk data
    main_chunk = struct.pack('<4sI9I', 
        smpl_chunk_id, smpl_chunk_size, manufacturer, product, sample_period,
        midi_unity_note, midi_pitch_fraction, smpte_format, smpte_offset,
        num_sample_loops, sampler_data)
    
    # Loop information
    loop_id = 0
    loop_type = 0  # Forward loop
    loop_start = loop_start
    loop_end = loop_end
    loop_fraction = 0
    loop_play_count = 0
    loop_info = struct.pack('<6I', 
        loop_id, loop_type, loop_start, loop_end, loop_fraction, loop_play_count)
    
    return main_chunk + loop_info

def update_wav_with_smpl_metadata(filename: str, loop_start: int, loop_end: int) -> None:
    """Update WAV file with SMPL chunk metadata."""
    temp_filename = f"{filename}.temp"
    try:
        with wave.open(filename, 'rb') as wav_read:
            params = wav_read.getparams()
            frames = wav_read.readframes(wav_read.getnframes())
        
        smpl_chunk = create_smpl_chunk(loop_start, loop_end)
        
        with wave.open(temp_filename, 'wb') as wav_write:
            wav_write.setparams(params)
            wav_write.writeframes(frames)
            
            # Manually write the SMPL chunk
            wav_write._file.write(smpl_chunk)
        
        # Update the file size in the RIFF header
        with open(temp_filename, 'r+b') as file:
            file.seek(0, io.SEEK_END)
            file_size = file.tell()
            file.seek(4)
            file.write(struct.pack('<I', file_size - 8))
        
        # Replace original file with updated file
        os.replace(temp_filename, filename)
        print(f"Updated {filename} with loop start: {loop_start} and loop end: {loop_end}")
    except Exception as e:
        print(f"Error processing {filename}: {e}")
        if os.path.exists(temp_filename):
            os.remove(temp_filename)

def process_csv(csv_file: str) -> None:
    """Process CSV file and update WAV files."""
    try:
        df = pd.read_csv(csv_file)
        required_columns = ['File', 'Loop Start', 'Loop End']
        if not all(col in df.columns for col in required_columns):
            raise ValueError(f"CSV must contain columns: {', '.join(required_columns)}")
        
        for _, row in df.iterrows():
            filename = os.path.join("wav_files", row['File'])
            loop_start = int(row['Loop Start'])
            loop_end = int(row['Loop End'])
            update_wav_with_smpl_metadata(filename, loop_start, loop_end)
    except Exception as e:
        print(f"Error processing CSV file: {e}")

def main():
    csv_file = 'loop_data.csv'
    process_csv(csv_file)

if __name__ == "__main__":
    main()
